const assert = require("assert").strict;
const { BigIntAsDecimal } = require("..");

const manualCases = {
  // {{{
  ROUND_HALF_UP: [
    [1000n, 100n, 10n],
    [1001n, 100n, 10n],
    [1049n, 100n, 10n],
    [1050n, 100n, 11n],
    [1051n, 100n, 11n],
    [1099n, 100n, 11n],
    [1100n, 100n, 11n],
    [1101n, 100n, 11n],
    [1149n, 100n, 11n],
    [1150n, 100n, 12n],
    [1151n, 100n, 12n],
    [1199n, 100n, 12n],
    [1200n, 100n, 12n],
    [-1000n, 100n, -10n],
    [-1001n, 100n, -10n],
    [-1049n, 100n, -10n],
    [-1050n, 100n, -11n],
    [-1051n, 100n, -11n],
    [-1099n, 100n, -11n],
    [-1100n, 100n, -11n],
    [-1101n, 100n, -11n],
    [-1149n, 100n, -11n],
    [-1150n, 100n, -12n],
    [-1151n, 100n, -12n],
    [-1199n, 100n, -12n],
    [-1200n, 100n, -12n],
    [1000n, -100n, -10n],
    [1001n, -100n, -10n],
    [1049n, -100n, -10n],
    [1050n, -100n, -11n],
    [1051n, -100n, -11n],
    [1099n, -100n, -11n],
    [1100n, -100n, -11n],
    [1101n, -100n, -11n],
    [1149n, -100n, -11n],
    [1150n, -100n, -12n],
    [1151n, -100n, -12n],
    [1199n, -100n, -12n],
    [1200n, -100n, -12n],
    [-1000n, -100n, 10n],
    [-1001n, -100n, 10n],
    [-1049n, -100n, 10n],
    [-1050n, -100n, 11n],
    [-1051n, -100n, 11n],
    [-1099n, -100n, 11n],
    [-1100n, -100n, 11n],
    [-1101n, -100n, 11n],
    [-1149n, -100n, 11n],
    [-1150n, -100n, 12n],
    [-1151n, -100n, 12n],
    [-1199n, -100n, 12n],
    [-1200n, -100n, 12n],
  ],
  ROUND_HALF_TO_EVEN: [
    [1000n, 100n, 10n],
    [1001n, 100n, 10n],
    [1049n, 100n, 10n],
    [1050n, 100n, 10n],
    [1051n, 100n, 11n],
    [1099n, 100n, 11n],
    [1100n, 100n, 11n],
    [1101n, 100n, 11n],
    [1149n, 100n, 11n],
    [1150n, 100n, 12n],
    [1151n, 100n, 12n],
    [1199n, 100n, 12n],
    [1200n, 100n, 12n],
    [-1000n, 100n, -10n],
    [-1001n, 100n, -10n],
    [-1049n, 100n, -10n],
    [-1050n, 100n, -10n],
    [-1051n, 100n, -11n],
    [-1099n, 100n, -11n],
    [-1100n, 100n, -11n],
    [-1101n, 100n, -11n],
    [-1149n, 100n, -11n],
    [-1150n, 100n, -12n],
    [-1151n, 100n, -12n],
    [-1199n, 100n, -12n],
    [-1200n, 100n, -12n],
    [1000n, -100n, -10n],
    [1001n, -100n, -10n],
    [1049n, -100n, -10n],
    [1050n, -100n, -10n],
    [1051n, -100n, -11n],
    [1099n, -100n, -11n],
    [1100n, -100n, -11n],
    [1101n, -100n, -11n],
    [1149n, -100n, -11n],
    [1150n, -100n, -12n],
    [1151n, -100n, -12n],
    [1199n, -100n, -12n],
    [1200n, -100n, -12n],
    [-1000n, -100n, 10n],
    [-1001n, -100n, 10n],
    [-1049n, -100n, 10n],
    [-1050n, -100n, 10n],
    [-1051n, -100n, 11n],
    [-1099n, -100n, 11n],
    [-1100n, -100n, 11n],
    [-1101n, -100n, 11n],
    [-1149n, -100n, 11n],
    [-1150n, -100n, 12n],
    [-1151n, -100n, 12n],
    [-1199n, -100n, 12n],
    [-1200n, -100n, 12n],
  ],
  ROUND_UP: [
    [1000n, 100n, 10n],
    [1001n, 100n, 11n],
    [1049n, 100n, 11n],
    [1050n, 100n, 11n],
    [1051n, 100n, 11n],
    [1099n, 100n, 11n],
    [1100n, 100n, 11n],
    [1101n, 100n, 12n],
    [1149n, 100n, 12n],
    [1150n, 100n, 12n],
    [1151n, 100n, 12n],
    [1199n, 100n, 12n],
    [1200n, 100n, 12n],
    [-1000n, 100n, -10n],
    [-1001n, 100n, -11n],
    [-1049n, 100n, -11n],
    [-1050n, 100n, -11n],
    [-1051n, 100n, -11n],
    [-1099n, 100n, -11n],
    [-1100n, 100n, -11n],
    [-1101n, 100n, -12n],
    [-1149n, 100n, -12n],
    [-1150n, 100n, -12n],
    [-1151n, 100n, -12n],
    [-1199n, 100n, -12n],
    [-1200n, 100n, -12n],
    [1000n, -100n, -10n],
    [1001n, -100n, -11n],
    [1049n, -100n, -11n],
    [1050n, -100n, -11n],
    [1051n, -100n, -11n],
    [1099n, -100n, -11n],
    [1100n, -100n, -11n],
    [1101n, -100n, -12n],
    [1149n, -100n, -12n],
    [1150n, -100n, -12n],
    [1151n, -100n, -12n],
    [1199n, -100n, -12n],
    [1200n, -100n, -12n],
    [-1000n, -100n, 10n],
    [-1001n, -100n, 11n],
    [-1049n, -100n, 11n],
    [-1050n, -100n, 11n],
    [-1051n, -100n, 11n],
    [-1099n, -100n, 11n],
    [-1100n, -100n, 11n],
    [-1101n, -100n, 12n],
    [-1149n, -100n, 12n],
    [-1150n, -100n, 12n],
    [-1151n, -100n, 12n],
    [-1199n, -100n, 12n],
    [-1200n, -100n, 12n],
  ],
  ROUND_DOWN: [
    [1000n, 100n, 10n],
    [1001n, 100n, 10n],
    [1049n, 100n, 10n],
    [1050n, 100n, 10n],
    [1051n, 100n, 10n],
    [1099n, 100n, 10n],
    [1100n, 100n, 11n],
    [1101n, 100n, 11n],
    [1149n, 100n, 11n],
    [1150n, 100n, 11n],
    [1151n, 100n, 11n],
    [1199n, 100n, 11n],
    [1200n, 100n, 12n],
    [-1000n, 100n, -10n],
    [-1001n, 100n, -10n],
    [-1049n, 100n, -10n],
    [-1050n, 100n, -10n],
    [-1051n, 100n, -10n],
    [-1099n, 100n, -10n],
    [-1100n, 100n, -11n],
    [-1101n, 100n, -11n],
    [-1149n, 100n, -11n],
    [-1150n, 100n, -11n],
    [-1151n, 100n, -11n],
    [-1199n, 100n, -11n],
    [-1200n, 100n, -12n],
    [1000n, -100n, -10n],
    [1001n, -100n, -10n],
    [1049n, -100n, -10n],
    [1050n, -100n, -10n],
    [1051n, -100n, -10n],
    [1099n, -100n, -10n],
    [1100n, -100n, -11n],
    [1101n, -100n, -11n],
    [1149n, -100n, -11n],
    [1150n, -100n, -11n],
    [1151n, -100n, -11n],
    [1199n, -100n, -11n],
    [1200n, -100n, -12n],
    [-1000n, -100n, 10n],
    [-1001n, -100n, 10n],
    [-1049n, -100n, 10n],
    [-1050n, -100n, 10n],
    [-1051n, -100n, 10n],
    [-1099n, -100n, 10n],
    [-1100n, -100n, 11n],
    [-1101n, -100n, 11n],
    [-1149n, -100n, 11n],
    [-1150n, -100n, 11n],
    [-1151n, -100n, 11n],
    [-1199n, -100n, 11n],
    [-1200n, -100n, 12n],
  ],
  ROUND_TOWARD_POSITIVE_INFINITY: [
    [1000n, 100n, 10n],
    [1001n, 100n, 11n],
    [1049n, 100n, 11n],
    [1050n, 100n, 11n],
    [1051n, 100n, 11n],
    [1099n, 100n, 11n],
    [1100n, 100n, 11n],
    [1101n, 100n, 12n],
    [1149n, 100n, 12n],
    [1150n, 100n, 12n],
    [1151n, 100n, 12n],
    [1199n, 100n, 12n],
    [1200n, 100n, 12n],
    [-1000n, 100n, -10n],
    [-1001n, 100n, -10n],
    [-1049n, 100n, -10n],
    [-1050n, 100n, -10n],
    [-1051n, 100n, -10n],
    [-1099n, 100n, -10n],
    [-1100n, 100n, -11n],
    [-1101n, 100n, -11n],
    [-1149n, 100n, -11n],
    [-1150n, 100n, -11n],
    [-1151n, 100n, -11n],
    [-1199n, 100n, -11n],
    [-1200n, 100n, -12n],
    [1000n, -100n, -10n],
    [1001n, -100n, -10n],
    [1049n, -100n, -10n],
    [1050n, -100n, -10n],
    [1051n, -100n, -10n],
    [1099n, -100n, -10n],
    [1100n, -100n, -11n],
    [1101n, -100n, -11n],
    [1149n, -100n, -11n],
    [1150n, -100n, -11n],
    [1151n, -100n, -11n],
    [1199n, -100n, -11n],
    [1200n, -100n, -12n],
    [-1000n, -100n, 10n],
    [-1001n, -100n, 11n],
    [-1049n, -100n, 11n],
    [-1050n, -100n, 11n],
    [-1051n, -100n, 11n],
    [-1099n, -100n, 11n],
    [-1100n, -100n, 11n],
    [-1101n, -100n, 12n],
    [-1149n, -100n, 12n],
    [-1150n, -100n, 12n],
    [-1151n, -100n, 12n],
    [-1199n, -100n, 12n],
    [-1200n, -100n, 12n],
  ],
  ROUND_TOWARD_NEGATIVE_INFINITY: [
    [1000n, 100n, 10n],
    [1001n, 100n, 10n],
    [1049n, 100n, 10n],
    [1050n, 100n, 10n],
    [1051n, 100n, 10n],
    [1099n, 100n, 10n],
    [1100n, 100n, 11n],
    [1101n, 100n, 11n],
    [1149n, 100n, 11n],
    [1150n, 100n, 11n],
    [1151n, 100n, 11n],
    [1199n, 100n, 11n],
    [1200n, 100n, 12n],
    [-1000n, 100n, -10n],
    [-1001n, 100n, -11n],
    [-1049n, 100n, -11n],
    [-1050n, 100n, -11n],
    [-1051n, 100n, -11n],
    [-1099n, 100n, -11n],
    [-1100n, 100n, -11n],
    [-1101n, 100n, -12n],
    [-1149n, 100n, -12n],
    [-1150n, 100n, -12n],
    [-1151n, 100n, -12n],
    [-1199n, 100n, -12n],
    [-1200n, 100n, -12n],
    [1000n, -100n, -10n],
    [1001n, -100n, -11n],
    [1049n, -100n, -11n],
    [1050n, -100n, -11n],
    [1051n, -100n, -11n],
    [1099n, -100n, -11n],
    [1100n, -100n, -11n],
    [1101n, -100n, -12n],
    [1149n, -100n, -12n],
    [1150n, -100n, -12n],
    [1151n, -100n, -12n],
    [1199n, -100n, -12n],
    [1200n, -100n, -12n],
    [-1000n, -100n, 10n],
    [-1001n, -100n, 10n],
    [-1049n, -100n, 10n],
    [-1050n, -100n, 10n],
    [-1051n, -100n, 10n],
    [-1099n, -100n, 10n],
    [-1100n, -100n, 11n],
    [-1101n, -100n, 11n],
    [-1149n, -100n, 11n],
    [-1150n, -100n, 11n],
    [-1151n, -100n, 11n],
    [-1199n, -100n, 11n],
    [-1200n, -100n, 12n],
  ],
  /// }}}
};

const MathImpl = {
  ROUND_HALF_UP: (n, div) => {
    const q = n / div;
    return 0 < q ? Math.floor(q + 0.5) : Math.ceil(q - 0.5);
  },
  ROUND_HALF_TO_EVEN: (n, div) => {
    const q = n / div;
    const r = 0 < q ? q % 2 : (q % 2) + 2;
    return 1 < r ? Math.floor(q + 0.5) : Math.ceil(q - 0.5);
  },
  ROUND_UP: (n, div) => {
    const q = n / div;
    return 0 < q ? Math.ceil(q) : Math.floor(q);
  },
  ROUND_DOWN: (n, div) => {
    const q = n / div;
    return 0 < q ? Math.floor(q) : Math.ceil(q);
  },
  ROUND_TOWARD_POSITIVE_INFINITY: (n, div) => {
    return Math.ceil(n / div);
  },
  ROUND_TOWARD_NEGATIVE_INFINITY: (n, div) => {
    return Math.floor(n / div);
  },
};

describe("BigIntAsDecimal.ROUND_*", () => {
  for (const mode of Object.keys(manualCases)) {
    const bignum = 1_000_000_000_000_000_000_000n;

    describe(mode, () => {
      it("should fail when the divisor is zero", () => {
        assert.throws(() => {
          BigIntAsDecimal[mode](1n, 0n);
        });
      });

      it("should produce the same results as manually prepared cases", () => {
        for (const e of manualCases[mode]) {
          assert.strictEqual(BigIntAsDecimal[mode](e[0], e[1]), e[2]);
        }
      });

      it("should produce the same results as does Math object-based implementation #1 sequence", () => {
        for (let i = 0; i < 1000; i++) {
          const num = bignum + BigInt(i);
          const rp = bignum / 100n + BigInt(MathImpl[mode](i, 100));
          const rn = -bignum / 100n + BigInt(MathImpl[mode](-i, 100));
          assert.strictEqual(BigIntAsDecimal[mode](num, 100n), rp);
          assert.strictEqual(BigIntAsDecimal[mode](-num, 100n), rn);
        }
      });

      it("should produce the same results as does Math object-based implementation #2 random", () => {
        for (let i = 0; i < 1000; i++) {
          const dividend = Math.trunc((Math.random() - 0.5) * 0xffffffff);
          const divisor = Math.trunc((Math.random() - 0.5) * 0xffffffff);
          assert.strictEqual(
            BigIntAsDecimal[mode](BigInt(dividend), BigInt(divisor)),
            BigInt(MathImpl[mode](dividend, divisor))
          );
        }
      });
    });
  }
});

// vim: fdm=marker fmr&
